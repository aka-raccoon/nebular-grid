---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

rook-task-vars: &task-vars
  cluster: '{{.cluster | default "qsb"}}'
  node: "{{.node}}"
  ceph_disk: "{{.ceph_disk}}"
  ts: "{{.ts}}"
  jobName: "{{.jobName}}"

vars:
  waitForJobScript: "../_scripts/wait-for-k8s-job.sh"
  ts: '{{now | date "150405"}}'

tasks:
  wipe-node-mu:
    desc: Trigger a wipe of Rook-Ceph data on node "mu"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/nvme0n1"
          cluster: "qsb"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: qsb-mu

  wipe-node-nu:
    desc: Trigger a wipe of Rook-Ceph data on node "nu"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/nvme0n1"
          cluster: "qsb"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: qsb-nu

  wipe-node-xi:
    desc: Trigger a wipe of Rook-Ceph data on node "xi"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/nvme0n1"
          cluster: "qsb"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: qsb-xi

  wipe-disk:
    desc: Wipe all remnants of rook-ceph from a given disk (ex. task rook:wipe-disk node=xi ceph_disk="/dev/nvme0n1")
    silent: true
    internal: true
    cmds:
      - envsubst < <(cat {{.wipeRookDiskJobTemplate}}) | kubectl --context {{.cluster}} apply -f -
      - bash {{.waitForJobScript}} "{{.jobName}}" "default" "{{.cluster}}"
      - kubectl --context {{.cluster}} -n default wait job/{{.jobName}} --for condition=complete --timeout=1m
      - kubectl --context {{.cluster}} -n default logs job/{{.jobName}}
      - kubectl --context {{.cluster}} -n default delete job {{.jobName}}
    vars:
      cluster: '{{.cluster | default "qsb"}}'
      node: '{{ or .node (fail "`node` is required") }}'
      ceph_disk: '{{ or .ceph_disk (fail "`ceph_disk` is required") }}'
      jobName: "wipe-disk-{{- .node -}}"
      wipeRookDiskJobTemplate: "WipeDiskJob.tmpl.yaml"
    env: *task-vars
    preconditions:
      - sh: test -f {{.waitForJobScript}}
      - sh: test -f {{.wipeRookDiskJobTemplate}}

  wipe-data:
    desc: Wipe all remnants of rook-ceph from a given disk (ex. task rook:wipe-data node=xi)
    silent: true
    internal: true
    cmds:
      - envsubst < <(cat {{.wipeRookDataJobTemplate}}) | kubectl --context {{.cluster}} apply -f -
      - bash {{.waitForJobScript}} {{.jobName}} default {{.cluster}}
      - kubectl --context {{.cluster}} -n default wait job/{{.jobName}} --for condition=complete --timeout=1m
      - kubectl --context {{.cluster}} -n default logs job/{{.jobName}}
      - kubectl --context {{.cluster}} -n default delete job {{.jobName}}
    vars:
      cluster: '{{.cluster | default "qsb"}}'
      node: '{{ or .node (fail "`node` is required") }}'
      jobName: "wipe-rook-data-{{- .node -}}"
      wipeRookDataJobTemplate: "WipeRookDataJob.tmpl.yaml"
    env: *task-vars
    preconditions:
      - sh: test -f {{.waitForJobScript}}
      - sh: test -f {{.wipeRookDataJobTemplate}}
